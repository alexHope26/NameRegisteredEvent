{"ast":null,"code":"// Tweaked version of nathan7's binary-parse-stream\n// (see https://github.com/nathan7/binary-parse-stream)\n// Uses NoFilter instead of the readable in the original.  Removes\n// the ability to read -1, which was odd and un-needed.\n// License for binary-parse-stream: MIT\n'use strict';\n\nexports = module.exports = BinaryParseStream;\n\nvar Stream = require('stream'),\n    TransformStream = Stream.Transform,\n    inherits = require('util').inherits,\n    NoFilter = require('nofilter');\n\nexports.One = -1;\ninherits(BinaryParseStream, TransformStream);\n\nfunction BinaryParseStream(options) {\n  TransformStream.call(this, options);\n  this._writableState.objectMode = false;\n  this._readableState.objectMode = true;\n  this.bs = new NoFilter();\n\n  this.__restart();\n}\n\nBinaryParseStream.prototype._transform = function (fresh, encoding, cb) {\n  var self = this;\n  this.bs.write(fresh);\n\n  while (this.bs.length >= this.__needed) {\n    var ret,\n        chunk = this.__needed === null ? undefined : this.bs.read(this.__needed);\n\n    try {\n      ret = this.__parser.next(chunk);\n    } catch (e) {\n      return cb(e);\n    }\n\n    if (this.__needed) this.__fresh = false;\n    if (!ret.done) this.__needed = ret.value | 0;else {\n      this.push(ret.value);\n\n      this.__restart();\n    }\n  }\n\n  return cb();\n};\n\nBinaryParseStream.prototype.__restart = function () {\n  this.__needed = null;\n  this.__parser = this._parse();\n  this.__fresh = true;\n};\n\nBinaryParseStream.prototype._flush = function (cb) {\n  cb(this.__fresh ? null : new Error('unexpected end of input'));\n};","map":null,"metadata":{},"sourceType":"script"}