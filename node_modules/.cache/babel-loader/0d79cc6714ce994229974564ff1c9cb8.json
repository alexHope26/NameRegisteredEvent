{"ast":null,"code":"\"use strict\";\n/***********************************************************\n* This file is part of the Slock.it IoT Layer.             *\n* The Slock.it IoT Layer contains:                         *\n*   - USN (Universal Sharing Network)                      *\n*   - INCUBED (Trustless INcentivized remote Node Network) *\n************************************************************\n* Copyright (C) 2016 - 2018 Slock.it GmbH                  *\n* All Rights Reserved.                                     *\n************************************************************\n* You may use, distribute and modify this code under the   *\n* terms of the license contract you have concluded with    *\n* Slock.it GmbH.                                           *\n* For information about liability, maintenance etc. also   *\n* refer to the contract concluded with Slock.it GmbH.      *\n************************************************************\n* For more information, please refer to http://slock.it    *\n* For questions, please contact info@slock.it              *\n***********************************************************/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Ajv = require(\"ajv\");\n/**\n * the ajv instance with custom formatters and keywords\n */\n\n\nexports.ajv = new Ajv();\nexports.ajv.addFormat('address', /^0x[0-9a-fA-F]{40}$/);\nexports.ajv.addFormat('bytes32', /^0x[0-9a-fA-F]{64}$/);\nexports.ajv.addFormat('bytes64', /^0x[0-9a-fA-F]{128}$/);\nexports.ajv.addFormat('hex', /^0x[0-9a-fA-F]{2,}$/);\nexports.ajv.addFormat('hexWithout', /^[0-9a-fA-F]{2,}$/);\nexports.ajv.addFormat('path', /^[\\/a-zA-Z_\\-0-9]+$/);\nexports.ajv.addKeyword('timestamp', {\n  type: 'number',\n  validate: (sch, data) => sch === 'current' ? !!(data > Date.now() / 1000 - 60 || data < Date.now() / 1000 + 60) : !!(data === 0 || Date.now() / 1000 - 3600 * 24 * 365 || data < Date.now() / 1000 + 3600 * 24 * 365)\n});\n/**\n * validates the data and throws an error in case they are not valid.\n *\n * @export\n * @param {Ajv.ValidateFunction} fn\n * @param {any} ob\n */\n\nfunction validateAndThrow(fn, ob) {\n  if (!fn(ob)) throw new Error('ERRKEY: invalid_data : ' + fn.errors.map(_ => _.dataPath + '(' + JSON.stringify(_.data || _.params) + '):' + _.message).join(', ') + ':' + JSON.stringify(ob, null, 2));\n}\n\nexports.validateAndThrow = validateAndThrow;\n\nfunction validate(ob, def) {\n  validateAndThrow(exports.ajv.compile(def), ob);\n}\n\nexports.validate = validate;","map":null,"metadata":{},"sourceType":"script"}