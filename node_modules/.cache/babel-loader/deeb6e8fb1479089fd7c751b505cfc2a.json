{"ast":null,"code":"\"use strict\";\n/***********************************************************\n* This file is part of the Slock.it IoT Layer.             *\n* The Slock.it IoT Layer contains:                         *\n*   - USN (Universal Sharing Network)                      *\n*   - INCUBED (Trustless INcentivized remote Node Network) *\n************************************************************\n* Copyright (C) 2016 - 2018 Slock.it GmbH                  *\n* All Rights Reserved.                                     *\n************************************************************\n* You may use, distribute and modify this code under the   *\n* terms of the license contract you have concluded with    *\n* Slock.it GmbH.                                           *\n* For information about liability, maintenance etc. also   *\n* refer to the contract concluded with Slock.it GmbH.      *\n************************************************************\n* For more information, please refer to https://slock.it   *\n* For questions, please contact info@slock.it              *\n***********************************************************/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst util_1 = require(\"../../util/util\");\n\nconst api_1 = require(\"./api\");\n\nfunction callContract(client, contract, chainId, signature, args, config) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return api_1.decodeFunction(signature, (yield client.sendRPC('eth_call', [{\n      to: contract,\n      data: '0x' + api_1.encodeFunction(signature, args)\n    }, 'latest'], chainId, config).then(_ => _.error ? Promise.reject(new Error('Error handling call to ' + contract + ' :' + JSON.stringify(_.error))) : ethereumjs_util_1.toBuffer(_.result + ''))));\n  });\n}\n\nexports.callContract = callContract;\n\nfunction getChainData(client, chainId, config) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return callContract(client, client.defConfig.chainRegistry, client.defConfig.mainChain, 'chains(bytes32):(address,string,string,address,bytes32)', [util_1.toHex(chainId, 32)], config).then(_ => ({\n      owner: ethereumjs_util_1.toChecksumAddress(_[0]),\n      bootNodes: _[1].split(','),\n      meta: _[2],\n      registryContract: ethereumjs_util_1.toChecksumAddress(_[3]),\n      contractChain: util_1.toSimpleHex(util_1.toHex(_[4]))\n    }));\n  });\n}\n\nexports.getChainData = getChainData;","map":null,"metadata":{},"sourceType":"script"}