{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst modules = {};\n\nfunction tryLoadModule(path, name) {\n  try {\n    require(path);\n\n    return modules[name];\n  } catch (_a) {\n    return null;\n  }\n}\n\nfunction getModule(name) {\n  const m = modules[name] || tryLoadModule('../modules/' + name, name) || tryLoadModule(name, name);\n  if (!m) throw new Error('Could not find the module ' + name + ' please ensure it was loaded before!');\n  return m;\n}\n\nexports.getModule = getModule;\n/** general verification-function which handles it according to its given type. */\n\nfunction verifyProof(request, response, allowWithoutProof, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return (yield ctx.module.verifyProof(request, response, allowWithoutProof, ctx)) || Promise.all(Object.keys(modules).filter(_ => _ !== ctx.module.name).map(m => modules[m].verifyProof(request, response, allowWithoutProof, ctx))).then(a => a.find(_ => !!_));\n  });\n}\n\nexports.verifyProof = verifyProof;\n\nfunction register(module) {\n  modules[module.name] = module;\n}\n\nexports.register = register; // we are always importing the eth-modules because it is needed in order to verify the nodelist\n\nrequire(\"../modules/eth\");","map":null,"metadata":{},"sourceType":"script"}