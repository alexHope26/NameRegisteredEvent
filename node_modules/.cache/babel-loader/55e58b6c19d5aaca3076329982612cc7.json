{"ast":null,"code":"'use strict';\n\nvar utils = require('ethereumjs-util');\n\nvar BN = utils.BN;\n\nvar error = require('../exceptions.js').ERROR;\n\nvar fees = require('ethereum-common');\n\nvar assert = require('assert');\n\nvar bn128Module = require('rustbn.js');\n\nvar ecAddPrecompile = bn128Module.cwrap('ec_add', 'string', ['string']);\n\nmodule.exports = function (opts) {\n  assert(opts.data);\n  var results = {};\n  var data = opts.data;\n  var inputHexStr = data.toString('hex');\n  results.gasUsed = new BN(fees.ecAddGas.v);\n\n  if (opts.gasLimit.lt(results.gasUsed)) {\n    results.return = Buffer.alloc(0);\n    results.exception = 0;\n    results.gasUsed = new BN(opts.gasLimit);\n    results.exceptionError = error.OUT_OF_GAS;\n    return results;\n  }\n\n  var returnData = ecAddPrecompile(inputHexStr); // check ecadd success or failure by comparing the output length\n\n  if (returnData.length !== 128) {\n    results.return = Buffer.alloc(0);\n    results.exception = 0;\n    results.gasUsed = new BN(opts.gasLimit);\n    results.exceptionError = error.OUT_OF_GAS;\n  } else {\n    results.return = Buffer.from(returnData, 'hex');\n    results.exception = 1;\n  }\n\n  return results;\n};","map":null,"metadata":{},"sourceType":"script"}