{"ast":null,"code":"\"use strict\";\n/***********************************************************\n* This file is part of the Slock.it IoT Layer.             *\n* The Slock.it IoT Layer contains:                         *\n*   - USN (Universal Sharing Network)                      *\n*   - INCUBED (Trustless INcentivized remote Node Network) *\n************************************************************\n* Copyright (C) 2016 - 2018 Slock.it GmbH                  *\n* All Rights Reserved.                                     *\n************************************************************\n* You may use, distribute and modify this code under the   *\n* terms of the license contract you have concluded with    *\n* Slock.it GmbH.                                           *\n* For information about liability, maintenance etc. also   *\n* refer to the contract concluded with Slock.it GmbH.      *\n************************************************************\n* For more information, please refer to https://slock.it   *\n* For questions, please contact info@slock.it              *\n***********************************************************/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nfunction canProof(node) {\n  return (node.props & 0x01) > 0;\n}\n\nexports.canProof = canProof;\n\nfunction canMultiChain(node) {\n  return (node.props & 0x02) > 0;\n}\n\nexports.canMultiChain = canMultiChain;\n\nfunction createRandomIndexes(len, limit, seed, result = []) {\n  let step = seed.readUIntBE(0, 6); // first 6 bytes\n\n  let pos = seed.readUIntBE(6, 6) % len; // next 6 bytes\n\n  while (result.length < limit) {\n    if (result.indexOf(pos) >= 0) step = (seed = ethereumjs_util_1.keccak256(seed)).readUIntBE(0, 6);else result.push(pos);\n    pos = (pos + step) % len;\n  }\n\n  return result;\n}\n\nexports.createRandomIndexes = createRandomIndexes;","map":null,"metadata":{},"sourceType":"script"}