{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/edgarrodriguezzavala/Workspace/programing-test-named-registered/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DeltaHistory {\n  constructor(init = [], deltaStrings = false) {\n    if (deltaStrings) this.loadDeltaStrings(init);else {\n      this.data = [];\n      if (init) this.addState(0, init);\n    }\n  }\n\n  getData(index) {\n    const res = [];\n\n    for (const d of this.data) {\n      if (d.block > index) return res;\n      res.splice(d.start, d.len, ...d.data);\n    }\n\n    return res;\n  }\n\n  getLastIndex() {\n    return this.data.length && this.data[this.data.length - 1].block;\n  }\n\n  addState(start, data) {\n    const prev = this.getData(start - 1);\n    const delta = createDelta(prev, data, start);\n    if (!delta) return;\n    if (!this.data.length || this.data[this.data.length - 1].block < start) this.data.push(delta);else {\n      for (let i = this.data.length - 1; i >= 0; i--) {\n        const d = this.data[i];\n\n        if (d.block === start) {\n          const next = [...prev];\n          next.splice(d.start, d.len, ...d.data); // old state\n\n          if (i + 1 < this.data.length) next.splice(this.data[i + 1].start, this.data[i + 1].len, ...this.data[i + 1].data); // next state\n\n          this.data[i] = delta;\n          if (i + 1 == this.data.length) return;\n          const nextDelta = createDelta(data, next, this.data[i + 1].block);\n          if (!nextDelta) this.data.splice(i + 1, 1);else this.data[i + 1] = nextDelta;\n          return;\n        }\n\n        if (d.block < start) {\n          const n = this.data[i + 1];\n          const next = [...prev];\n          next.splice(n.start, n.len, ...n.data); // next state\n\n          const nextDelta = createDelta(data, next, n.block);\n          if (!nextDelta) n.block = start;else this.data.splice(i + 1, 1, delta, nextDelta);\n          return;\n        }\n      } // we need to insert into first pos\n\n\n      const dn = createDelta(data, this.data[0].data, this.data[0].block);\n      if (!dn) this.data[0].block = start;else this.data.splice(0, 1, delta, dn);\n    }\n  }\n\n  toDeltaStrings() {\n    return this.data.map(_ => \"\".concat(_.block.toString(16), \":\").concat(_.start.toString(16), \":\").concat(_.len.toString(16), \":\").concat(_.data.join(':')));\n  }\n\n  loadDeltaStrings(deltas) {\n    this.data = deltas.map(_ => {\n      const d = _.split(':');\n\n      const _d$slice$map = d.slice(0, 3).map(_ => parseInt(_, 16)),\n            _d$slice$map2 = _slicedToArray(_d$slice$map, 3),\n            block = _d$slice$map2[0],\n            start = _d$slice$map2[1],\n            len = _d$slice$map2[2];\n\n      return {\n        block,\n        start,\n        len,\n        data: d.slice(3)\n      };\n    });\n  }\n\n}\n\nexports.default = DeltaHistory;\n\nfunction createDelta(a, b, block) {\n  const first = firstChange(a, b, 1);\n  const last = firstChange(a, b, -1); // no change\n\n  if (a.length === b.length && first === a.length) return null;\n  return {\n    block,\n    start: first,\n    len: a.length - last - first,\n    data: b.slice(first, b.length - last)\n  };\n}\n\nfunction firstChange(a, b, dir = 1) {\n  const len = Math.min(a.length, b.length);\n\n  for (let i = 0; i < len; i++) {\n    if (dir === 1 && a[i] != b[i]) return i;\n    if (dir === -1 && a[a.length - 1 - i] != b[b.length - 1 - i]) return i;\n  }\n\n  return len;\n}","map":null,"metadata":{},"sourceType":"script"}