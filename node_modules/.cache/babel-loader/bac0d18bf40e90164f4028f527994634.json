{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar util = require('util');\n\nvar ethUtil = require('ethereumjs-util');\n\nvar StateManager = require('./stateManager.js');\n\nvar Account = require('ethereumjs-account');\n\nvar AsyncEventEmitter = require('async-eventemitter');\n\nvar BN = ethUtil.BN; // require the percomiled contracts\n\nvar num01 = require('./precompiled/01-ecrecover.js');\n\nvar num02 = require('./precompiled/02-sha256.js');\n\nvar num03 = require('./precompiled/03-ripemd160.js');\n\nvar num04 = require('./precompiled/04-identity.js');\n\nvar num05 = require('./precompiled/05-modexp.js');\n\nvar num06 = require('./precompiled/06-ecadd.js');\n\nvar num07 = require('./precompiled/07-ecmul.js');\n\nvar num08 = require('./precompiled/08-ecpairing.js');\n\nmodule.exports = VM;\nVM.deps = {\n  ethUtil: ethUtil,\n  Account: require('ethereumjs-account'),\n  Trie: require('merkle-patricia-tree'),\n  rlp: require('ethereumjs-util').rlp\n  /**\n   * @constructor\n   * @param {Object} [opts]\n   * @param {StateManager} [opts.stateManager] A state manager instance (EXPERIMENTAL - unstable API)\n   * @param {Trie} [opts.state] A merkle-patricia-tree instance for the state tree (ignored if stateManager is passed)\n   * @param {Blockchain} [opts.blockchain] A blockchain object for storing/retrieving blocks (ignored if stateManager is passed)\n   * @param {Boolean} [opts.activatePrecompiles] Create entries in the state tree for the precompiled contracts\n   * @param {Boolean} [opts.allowUnlimitedContractSize] Allows unlimited contract sizes while debugging (default: false; ONLY use during debugging)\n   */\n\n};\n\nfunction VM() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.opts = opts;\n\n  if (opts.stateManager) {\n    this.stateManager = opts.stateManager;\n  } else {\n    this.stateManager = new StateManager({\n      trie: opts.state,\n      blockchain: opts.blockchain\n    });\n  }\n\n  this.allowUnlimitedContractSize = opts.allowUnlimitedContractSize === undefined ? false : opts.allowUnlimitedContractSize; // temporary\n  // this is here for a gradual transition to StateManager\n\n  this.blockchain = this.stateManager.blockchain;\n  this.trie = this.stateManager.trie; // precompiled contracts\n\n  this._precompiled = {};\n  this._precompiled['0000000000000000000000000000000000000001'] = num01;\n  this._precompiled['0000000000000000000000000000000000000002'] = num02;\n  this._precompiled['0000000000000000000000000000000000000003'] = num03;\n  this._precompiled['0000000000000000000000000000000000000004'] = num04;\n  this._precompiled['0000000000000000000000000000000000000005'] = num05;\n  this._precompiled['0000000000000000000000000000000000000006'] = num06;\n  this._precompiled['0000000000000000000000000000000000000007'] = num07;\n  this._precompiled['0000000000000000000000000000000000000008'] = num08;\n\n  if (this.opts.activatePrecompiles) {\n    for (var i = 1; i <= 7; i++) {\n      this.trie.put(new BN(i).toArrayLike(Buffer, 'be', 20), new Account().serialize());\n    }\n  }\n\n  AsyncEventEmitter.call(this);\n}\n\nutil.inherits(VM, AsyncEventEmitter);\nVM.prototype.runCode = require('./runCode.js');\nVM.prototype.runJIT = require('./runJit.js');\nVM.prototype.runBlock = require('./runBlock.js');\nVM.prototype.runTx = require('./runTx.js');\nVM.prototype.runCall = require('./runCall.js');\nVM.prototype.runBlockchain = require('./runBlockchain.js');\n\nVM.prototype.copy = function () {\n  return new VM({\n    stateManager: this.stateManager.copy()\n  });\n};\n/**\n * Loads precompiled contracts into the state\n */\n\n\nVM.prototype.loadCompiled = function (address, src, cb) {\n  this.trie.db.put(address, src, cb);\n};\n\nVM.prototype.populateCache = function (addresses, cb) {\n  this.stateManager.warmCache(addresses, cb);\n};","map":null,"metadata":{},"sourceType":"script"}