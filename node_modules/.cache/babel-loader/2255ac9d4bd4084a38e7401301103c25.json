{"ast":null,"code":"\"use strict\";\n/***********************************************************\n* This file is part of the Slock.it IoT Layer.             *\n* The Slock.it IoT Layer contains:                         *\n*   - USN (Universal Sharing Network)                      *\n*   - INCUBED (Trustless INcentivized remote Node Network) *\n************************************************************\n* Copyright (C) 2016 - 2018 Slock.it GmbH                  *\n* All Rights Reserved.                                     *\n************************************************************\n* You may use, distribute and modify this code under the   *\n* terms of the license contract you have concluded with    *\n* Slock.it GmbH.                                           *\n* For information about liability, maintenance etc. also   *\n* refer to the contract concluded with Slock.it GmbH.      *\n************************************************************\n* For more information, please refer to https://slock.it   *\n* For questions, please contact info@slock.it              *\n***********************************************************/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst modules_1 = require(\"./modules\");\n/**\n * Context for a specific chain including cache and chainSpecs.\n */\n\n\nclass ChainContext {\n  constructor(client, chainId, chainSpec) {\n    this.client = client;\n    this.chainId = chainId;\n    this.chainSpec = chainSpec;\n    this.genericCache = {};\n    this.lastValidatorChange = 0;\n    const s = this.client.defConfig.servers[this.chainId];\n    this.module = modules_1.getModule(s && s.verifier || 'eth');\n\n    try {\n      // if we are running in the browser we use to localStorage as cache\n      if (client.defConfig.cacheStorage === undefined && window && window.localStorage) client.defConfig.cacheStorage = window.localStorage;\n    } catch (x) {}\n\n    this.initCache();\n    client.addListener('nodeUpdateFinished', () => this.updateCache());\n  }\n  /**\n   * this function is calleds before the server is asked.\n   * If it returns a promise than the request is handled internally otherwise the server will handle the response.\n   * this function should be overriden by modules that want to handle calls internally\n   * @param request\n   */\n\n\n  handleIntern(request) {\n    return null;\n  }\n  /**\n   * returns the chainspec for th given block number\n   */\n\n\n  getChainSpec(block) {\n    return this.chainSpec && this.chainSpec.filter(_ => _.block <= block).pop();\n  }\n\n  initCache() {\n    const chainId = this.chainId;\n\n    if (this.client.defConfig.cacheStorage && chainId) {\n      // read nodeList\n      const nl = this.client.defConfig.cacheStorage.getItem('in3.nodeList.' + chainId);\n\n      try {\n        if (nl) this.client.defConfig.servers[chainId] = JSON.parse(nl);\n      } catch (ex) {\n        this.client.defConfig.cacheStorage.setItem('in3.nodeList.' + chainId, '');\n      } // read cache\n\n\n      const cache = this.client.defConfig.cacheStorage.getItem('in3.cache.' + chainId);\n\n      try {\n        if (cache) this.genericCache = JSON.parse(cache);\n      } catch (ex) {\n        this.client.defConfig.cacheStorage.setItem('in3.cache.' + chainId, '');\n      }\n    }\n  }\n\n  updateCache() {\n    if (this.client.defConfig.cacheStorage && this.chainId && this.client.defConfig.servers[this.chainId]) {\n      this.client.defConfig.cacheStorage.setItem('in3.nodeList.' + this.chainId, JSON.stringify(this.client.defConfig.servers[this.chainId]));\n    }\n  }\n\n  getFromCache(key) {\n    return this.genericCache[key];\n  }\n\n  putInCache(key, value) {\n    this.genericCache[key] = value;\n    if (this.client.defConfig.cacheStorage && this.chainId) this.client.defConfig.cacheStorage.setItem('in3.cache.' + this.chainId, JSON.stringify(this.genericCache));\n  }\n\n  clearCache(prefix) {\n    Object.keys(this.genericCache).filter(_ => !prefix || _.startsWith(prefix)).forEach(k => delete this.genericCache[k]);\n    if (this.client.defConfig.cacheStorage && this.chainId) this.client.defConfig.cacheStorage.setItem('in3.cache.' + this.chainId, JSON.stringify(this.genericCache));\n  }\n\n}\n\nexports.default = ChainContext;","map":null,"metadata":{},"sourceType":"script"}