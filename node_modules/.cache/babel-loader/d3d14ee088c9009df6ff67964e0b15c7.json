{"ast":null,"code":"var inherits = require('inherits');\n\nvar Readable = require('readable-stream').Readable;\n\nvar extend = require('xtend');\n\nvar EncodingError = require('level-errors').EncodingError;\n\nmodule.exports = ReadStream;\ninherits(ReadStream, Readable);\n\nfunction ReadStream(iterator, options) {\n  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options);\n  Readable.call(this, extend(options, {\n    objectMode: true\n  }));\n  this._iterator = iterator;\n  this._destroyed = false;\n  this._decoder = null;\n  if (options && options.decoder) this._decoder = options.decoder;\n  this.on('end', this._cleanup.bind(this));\n}\n\nReadStream.prototype._read = function () {\n  var self = this;\n  if (this._destroyed) return;\n\n  this._iterator.next(function (err, key, value) {\n    if (self._destroyed) return;\n    if (err) return self.emit('error', err);\n\n    if (key === undefined && value === undefined) {\n      self.push(null);\n    } else {\n      if (!self._decoder) return self.push({\n        key: key,\n        value: value\n      });\n\n      try {\n        var value = self._decoder(key, value);\n      } catch (err) {\n        self.emit('error', new EncodingError(err));\n        self.push(null);\n        return;\n      }\n\n      self.push(value);\n    }\n  });\n};\n\nReadStream.prototype.destroy = ReadStream.prototype._cleanup = function () {\n  var self = this;\n  if (this._destroyed) return;\n  this._destroyed = true;\n\n  this._iterator.end(function (err) {\n    if (err) return self.emit('error', err);\n    self.emit('close');\n  });\n};","map":null,"metadata":{},"sourceType":"script"}