{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nvar bytes_1 = require(\"@ethersproject/bytes\");\n\nvar properties_1 = require(\"@ethersproject/properties\");\n\nvar logger_1 = require(\"@ethersproject/logger\");\n\nvar _version_1 = require(\"./_version\");\n\nvar logger = new logger_1.Logger(_version_1.version);\n\nvar abstract_coder_1 = require(\"./coders/abstract-coder\");\n\nvar address_1 = require(\"./coders/address\");\n\nvar array_1 = require(\"./coders/array\");\n\nvar boolean_1 = require(\"./coders/boolean\");\n\nvar bytes_2 = require(\"./coders/bytes\");\n\nvar fixed_bytes_1 = require(\"./coders/fixed-bytes\");\n\nvar null_1 = require(\"./coders/null\");\n\nvar number_1 = require(\"./coders/number\");\n\nvar string_1 = require(\"./coders/string\");\n\nvar tuple_1 = require(\"./coders/tuple\");\n\nvar fragments_1 = require(\"./fragments\");\n\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\nvar AbiCoder =\n/** @class */\nfunction () {\n  function AbiCoder(coerceFunc) {\n    var _newTarget = this.constructor;\n    logger.checkNew(_newTarget, AbiCoder);\n    properties_1.defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n\n  AbiCoder.prototype._getCoder = function (param) {\n    var _this = this;\n\n    switch (param.baseType) {\n      case \"address\":\n        return new address_1.AddressCoder(param.name);\n\n      case \"bool\":\n        return new boolean_1.BooleanCoder(param.name);\n\n      case \"string\":\n        return new string_1.StringCoder(param.name);\n\n      case \"bytes\":\n        return new bytes_2.BytesCoder(param.name);\n\n      case \"array\":\n        return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n\n      case \"tuple\":\n        return new tuple_1.TupleCoder((param.components || []).map(function (component) {\n          return _this._getCoder(component);\n        }), param.name);\n\n      case \"\":\n        return new null_1.NullCoder(param.name);\n    } // u?int[0-9]*\n\n\n    var match = param.type.match(paramTypeNumber);\n\n    if (match) {\n      var size = parseInt(match[2] || \"256\");\n\n      if (size === 0 || size > 256 || size % 8 !== 0) {\n        logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n      }\n\n      return new number_1.NumberCoder(size / 8, match[1] === \"int\", param.name);\n    } // bytes[0-9]+\n\n\n    match = param.type.match(paramTypeBytes);\n\n    if (match) {\n      var size = parseInt(match[1]);\n\n      if (size === 0 || size > 32) {\n        logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n      }\n\n      return new fixed_bytes_1.FixedBytesCoder(size, param.name);\n    }\n\n    return logger.throwError(\"invalid type\", \"type\", param.type);\n  };\n\n  AbiCoder.prototype._getWordSize = function () {\n    return 32;\n  };\n\n  AbiCoder.prototype._getReader = function (data) {\n    return new abstract_coder_1.Reader(data, this._getWordSize(), this.coerceFunc);\n  };\n\n  AbiCoder.prototype._getWriter = function () {\n    return new abstract_coder_1.Writer(this._getWordSize());\n  };\n\n  AbiCoder.prototype.encode = function (types, values) {\n    var _this = this;\n\n    if (types.length !== values.length) {\n      logger.throwError(\"types/values length mismatch\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n        count: {\n          types: types.length,\n          values: values.length\n        },\n        value: {\n          types: types,\n          values: values\n        }\n      });\n    }\n\n    var coders = types.map(function (type) {\n      return _this._getCoder(fragments_1.ParamType.from(type));\n    });\n    var coder = new tuple_1.TupleCoder(coders, \"_\");\n\n    var writer = this._getWriter();\n\n    coder.encode(writer, values);\n    return writer.data;\n  };\n\n  AbiCoder.prototype.decode = function (types, data) {\n    var _this = this;\n\n    var coders = types.map(function (type) {\n      return _this._getCoder(fragments_1.ParamType.from(type));\n    });\n    var coder = new tuple_1.TupleCoder(coders, \"_\");\n    return coder.decode(this._getReader(bytes_1.arrayify(data)));\n  };\n\n  return AbiCoder;\n}();\n\nexports.AbiCoder = AbiCoder;\nexports.defaultAbiCoder = new AbiCoder();","map":null,"metadata":{},"sourceType":"script"}