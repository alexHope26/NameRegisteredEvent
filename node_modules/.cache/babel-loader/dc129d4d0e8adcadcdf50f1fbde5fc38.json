{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar assert = require('assert');\n\nvar utils = require('ethereumjs-util');\n\nvar byteSize = 256;\n/**\n * Represents a Bloom\n * @constructor\n * @param {Buffer} bitvector\n */\n\nvar Bloom = module.exports = function (bitvector) {\n  if (!bitvector) {\n    this.bitvector = utils.zeros(byteSize);\n  } else {\n    assert(bitvector.length === byteSize, 'bitvectors must be 2048 bits long');\n    this.bitvector = bitvector;\n  }\n};\n/**\n * adds an element to a bit vector of a 64 byte bloom filter\n * @method add\n * @param {Buffer} element\n */\n\n\nBloom.prototype.add = function (e) {\n  e = utils.sha3(e);\n  var mask = 2047; // binary 11111111111\n\n  for (var i = 0; i < 3; i++) {\n    var first2bytes = e.readUInt16BE(i * 2);\n    var loc = mask & first2bytes;\n    var byteLoc = loc >> 3;\n    var bitLoc = 1 << loc % 8;\n    this.bitvector[byteSize - byteLoc - 1] |= bitLoc;\n  }\n};\n/**\n * checks if an element is in the blooom\n * @method check\n * @param {Buffer} element\n */\n\n\nBloom.prototype.check = function (e) {\n  e = utils.sha3(e);\n  var mask = 511; // binary 111111111\n\n  var match = true;\n\n  for (var i = 0; i < 3 && match; i++) {\n    var first2bytes = e.readUInt16BE(i * 2);\n    var loc = mask & first2bytes;\n    var byteLoc = loc >> 3;\n    var bitLoc = 1 << loc % 8;\n    match = this.bitvector[byteSize - byteLoc - 1] & bitLoc;\n  }\n\n  return Boolean(match);\n};\n/**\n * checks if multple topics are in a bloom\n * @method check\n * @param {Buffer} element\n */\n\n\nBloom.prototype.multiCheck = function (topics) {\n  var self = this;\n  return topics.every(function (t) {\n    if (!Buffer.isBuffer(t)) {\n      t = Buffer.from(t, 'hex');\n    }\n\n    return self.check(t);\n  });\n};\n/**\n * bitwise or blooms together\n * @method or\n * @param {Bloom} bloom\n */\n\n\nBloom.prototype.or = function (bloom) {\n  if (bloom) {\n    for (var i = 0; i <= byteSize; i++) {\n      this.bitvector[i] = this.bitvector[i] | bloom.bitvector[i];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}