{"ast":null,"code":"\"use strict\";\n/***********************************************************\n* This file is part of the Slock.it IoT Layer.             *\n* The Slock.it IoT Layer contains:                         *\n*   - USN (Universal Sharing Network)                      *\n*   - INCUBED (Trustless INcentivized remote Node Network) *\n************************************************************\n* Copyright (C) 2016 - 2018 Slock.it GmbH                  *\n* All Rights Reserved.                                     *\n************************************************************\n* You may use, distribute and modify this code under the   *\n* terms of the license contract you have concluded with    *\n* Slock.it GmbH.                                           *\n* For information about liability, maintenance etc. also   *\n* refer to the contract concluded with Slock.it GmbH.      *\n************************************************************\n* For more information, please refer to https://slock.it    *\n* For questions, please contact info@slock.it              *\n***********************************************************/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst axios_1 = require(\"axios\");\n\nconst cbor = require(\"../util/cbor\");\n/**\n * Default Transport impl sending http-requests.\n */\n\n\nclass AxiosTransport {\n  constructor(format = 'json') {\n    this.format = format;\n  }\n\n  isOnline() {\n    return axios_1.default.head('https://www.google.com').then(_ => true, _ => false);\n  }\n\n  handle(url, data, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // convertto array\n      const requests = Array.isArray(data) ? data : [data]; // add cbor-config\n\n      const conf = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      if (this.format === 'cbor') Object.assign(conf, {\n        transformRequest: cbor.encodeRequests,\n        transformResponse: cbor.decodeResponses,\n        headers: {\n          'Content-Type': 'application/cbor'\n        },\n        responseType: 'arraybuffer'\n      }); // execute request\n\n      try {\n        //     requests.forEach(r=>console.log(' => req '+r.method+'('+r.params.map(_=>JSON.stringify(_)).join()+')'))\n        const res = yield axios_1.default.post(url, requests, Object.assign({}, conf, {\n          timeout: timeout || 5000\n        })); // throw if the status is an error\n\n        if (res.status > 200) throw new Error('Invalid status'); // if this was not given as array, we need to convert it back to a single object\n\n        return Array.isArray(data) ? res.data : res.data[0];\n      } catch (err) {\n        throw new Error('Invalid response from ' + url + '(' + JSON.stringify(requests, null, 2) + ')' + ' : ' + err.message + (err.response ? err.response.data || err.response.statusText : ''));\n      }\n    });\n  }\n\n  random(count) {\n    const result = [];\n\n    for (let i = 0; i < count; i++) result.push(Math.random());\n\n    return result;\n  }\n\n}\n\nexports.AxiosTransport = AxiosTransport;","map":null,"metadata":{},"sourceType":"script"}